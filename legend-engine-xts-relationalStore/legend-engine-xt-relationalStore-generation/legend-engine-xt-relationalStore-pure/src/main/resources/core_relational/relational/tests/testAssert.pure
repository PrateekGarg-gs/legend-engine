// Copyright 2021 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::relational::tests::csv::*;
import meta::pure::mapping::*;
import meta::relational::mapping::*;
import  meta::relational::functions::asserts::*;
import meta::relational::functions::asserts::*;
import meta::csv::*;


function meta::relational::functions::asserts::assertSameSQL(sqlString:String[1],result:Result<Any|*>[1]):Boolean[1]
{
  assertEquals($sqlString, $result->sqlRemoveFormatting());
}

function meta::relational::functions::asserts::assertSameSQL(sqlString:String[1],result:String[1]):Boolean[1]
{
  assertEquals($sqlString, $result);
}


function meta::relational::functions::asserts::sqlContains(subString:String[1],result:Result<Any|*>[1]):Boolean[1]
{
  let sql = $result->sqlRemoveFormatting() ;
   assert($sql->contains($subString), | $sql + ' does not contain ' + $subString);
}

function meta::relational::functions::asserts::sqlContains(subString:String[1],result:String[1]):Boolean[1]
{
  assert($result->contains($subString), | $result + ' does not contain ' + $subString);
}


function meta::relational::functions::asserts::assertTdsFromCsv(expectedCSV: String[1], actual: TabularDataSet[1]): Boolean[1]
{
   // renaming to make unordered the default
   // also accept tds which cotains more info like column types etc
   meta::relational::functions::asserts::assertUnorderedTdsFromCsv($expectedCSV, $actual->toCSV());
}

function meta::relational::functions::asserts::assertUnorderedTds(expected: TabularDataSet[1], actual: TabularDataSet[1]): Boolean[1]
{
  assert($expected.columns->size() == $actual.columns->size(), | 'Number of columns do not match');
  assertEquals($expected.columns.name, $actual.columns.name, | 'Column names do not match');
  assertEquals($expected.columns.type, $actual.columns.type, | 'Column types do not match');
  assert($expected.rows->size() == $actual.rows->size(), | 'Number of rows do not match');
  zip(sortTds($expected).rows, sortTds($actual).rows)
    ->forAll(rowPair | assertEquals($rowPair.first.values, $rowPair.second.values, | 'Row values do not match'));
}

function <<access.private>> meta::relational::functions::asserts::sortTds(tds: TabularDataSet[1]): TabularDataSet[1]
{
  sort($tds, $tds.columns.name);
}

function  meta::relational::functions::asserts::assertUnorderedTdsFromCsv(expected: String[1], actual: String[1]): Boolean[1]
{
  assertEquals( meta::relational::functions::asserts::sortCsv($expected),  meta::relational::functions::asserts::sortCsv($actual));
}

function <<access.private>>  meta::relational::functions::asserts::sortCsv(csv: String[1]): String[1]
{
  let lines = $csv->split('\n');
  let columnLine = $lines->at(0) + '\n';
  let sortedRowsLines = $lines->tail()->sort()->joinStrings('\n');
  $columnLine + $sortedRowsLines;
}


function <<test.Test>> meta::relational::functions::asserts::testAssertUnorderedTds(): Any[*]
{
  let baseTds = ^TabularDataSet(
    columns=[
      ^TDSColumn(name='name', offset=0),
      ^TDSColumn(name='value', offset=1),
      ^TDSColumn(name='date', offset=2)
    ]
  );

  meta::relational::functions::asserts::assertUnorderedTds(
    ^TabularDataSet(
      columns=[
        ^TDSColumn(name='name', offset=0),
        ^TDSColumn(name='value', offset=1),
        ^TDSColumn(name='date', offset=2)
      ],
      rows=[
        ^TDSRow(values=['Hello', 2.2, %2015-04-15], parent=$baseTds),
        ^TDSRow(values=['Geoff', 3.2, %2015-02-15], parent=$baseTds)
      ]
    ),
    ^TabularDataSet(
      columns=[
        ^TDSColumn(name='name', offset=0),
        ^TDSColumn(name='value', offset=1),
        ^TDSColumn(name='date', offset=2)
      ],
      rows=[
        ^TDSRow(values=['Geoff', 3.2, %2015-02-15], parent=$baseTds),
        ^TDSRow(values=['Hello', 2.2, %2015-04-15], parent=$baseTds)
      ]
    )
  );

  assertEquals(
    ^TabularDataSet(
      columns=[
        ^TDSColumn(name='name', type=String, offset=0),
        ^TDSColumn(name='value', offset=1),
        ^TDSColumn(name='date', offset=2)
      ],
      rows=[
        ^TDSRow(values=['James', 2.2, %2015-02-15], parent=$baseTds),
        ^TDSRow(values=['James', 2.2, %2015-04-15], parent=$baseTds),
        ^TDSRow(values=['James', 3.2, %2015-03-15], parent=$baseTds),
        ^TDSRow(values=['John', 2.2, %2015-01-15], parent=$baseTds)
      ]
    )->toCSV(),
    sortTds(
      ^TabularDataSet(
        columns=[
          ^TDSColumn(name='name', offset=0),
          ^TDSColumn(name='value', offset=1),
          ^TDSColumn(name='date', offset=2)
        ],
        rows=[
          ^TDSRow(values=['John', 2.2, %2015-01-15], parent=$baseTds),
          ^TDSRow(values=['James', 3.2, %2015-03-15], parent=$baseTds),
          ^TDSRow(values=['James', 2.2, %2015-02-15], parent=$baseTds),
          ^TDSRow(values=['James', 2.2, %2015-04-15], parent=$baseTds)
        ]
      )
    )->toCSV()
  );
}

function <<test.Test>>  meta::relational::functions::asserts::testAssertUnorderedTdsFromCsv(): Any[*]
{
  let baseTds = ^TabularDataSet(
    columns=[
      ^TDSColumn(name='name', offset=0),
      ^TDSColumn(name='value', offset=1),
      ^TDSColumn(name='date', offset=2)
    ]
  );

   meta::relational::functions::asserts::assertUnorderedTdsFromCsv(
    ^TabularDataSet(
      columns=[
        ^TDSColumn(name='name', offset=0),
        ^TDSColumn(name='value', offset=1),
        ^TDSColumn(name='date', offset=2)
      ],
      rows=[
        ^TDSRow(values=['Hello', 2.2, %2015-04-15], parent=$baseTds),
        ^TDSRow(values=['Geoff', 3.2, %2015-02-15], parent=$baseTds)
      ]
    )->toCSV(),
    ^TabularDataSet(
      columns=[
        ^TDSColumn(name='name', offset=0),
        ^TDSColumn(name='value', offset=1),
        ^TDSColumn(name='date', offset=2)
      ],
      rows=[
        ^TDSRow(values=['Geoff', 3.2, %2015-02-15], parent=$baseTds),
        ^TDSRow(values=['Hello', 2.2, %2015-04-15], parent=$baseTds)
      ]
    )->toCSV()
  );

  assertEquals(
    'name,value,date\n' +
    'James,2.2,2015-02-15\n' +
    'James,2.2,2015-04-15\n' +
    'James,3.2,2015-03-15\n' +
    'John,2.2,2015-01-15',
    sortCsv(
      ^TabularDataSet(
        columns=[
          ^TDSColumn(name='name', offset=0),
          ^TDSColumn(name='value', offset=1),
          ^TDSColumn(name='date', offset=2)
        ],
        rows=[
          ^TDSRow(values=['John', 2.2, %2015-01-15], parent=$baseTds),
          ^TDSRow(values=['James', 3.2, %2015-03-15], parent=$baseTds),
          ^TDSRow(values=['James', 2.2, %2015-02-15], parent=$baseTds),
          ^TDSRow(values=['James', 2.2, %2015-04-15], parent=$baseTds)
        ]
      )->toCSV()
    )
  );
}
